// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StrokesProto.proto

package com.stroke.serialize;

public final class StrokesProto {
    private StrokesProto() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.google.protobuf.ExtensionRegistryLite) registry);
    }

    /**
     * Protobuf enum {@code stroke.RenderStyle}
     */
    public enum RenderStyle
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>Sharp = 0;</code>
         */
        Sharp(0),
        /**
         * <code>Round = 1;</code>
         */
        Round(1),
        UNRECOGNIZED(-1),;

        /**
         * <code>Sharp = 0;</code>
         */
        public static final int Sharp_VALUE = 0;
        /**
         * <code>Round = 1;</code>
         */
        public static final int Round_VALUE = 1;


        public final int getNumber() {
            if (this == UNRECOGNIZED) {
                throw new IllegalArgumentException(
                        "Can't get the number of an unknown enum value.");
            }
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static RenderStyle valueOf(int value) {
            return forNumber(value);
        }

        public static RenderStyle forNumber(int value) {
            switch (value) {
                case 0:
                    return Sharp;
                case 1:
                    return Round;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<RenderStyle>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<
                RenderStyle> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<RenderStyle>() {
                    public RenderStyle findValueByNumber(int number) {
                        return RenderStyle.forNumber(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return StrokesProto.getDescriptor().getEnumTypes().get(0);
        }

        private static final RenderStyle[] VALUES = values();

        public static RenderStyle valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
                return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
        }

        private final int value;

        private RenderStyle(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:stroke.RenderStyle)
    }

    public interface SPointF_OrBuilder extends
            // @@protoc_insertion_point(interface_extends:stroke.SPointF_)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>float X = 1;</code>
         */
        float getX();

        /**
         * <code>float Y = 2;</code>
         */
        float getY();

        /**
         * <code>float Pressure = 3;</code>
         */
        float getPressure();
    }

    /**
     * Protobuf type {@code stroke.SPointF_}
     */
    public static final class SPointF_ extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:stroke.SPointF_)
            SPointF_OrBuilder {
        private static final long serialVersionUID = 0L;

        // Use SPointF_.newBuilder() to construct.
        private SPointF_(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private SPointF_() {
            x_ = 0F;
            y_ = 0F;
            pressure_ = 0F;
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private SPointF_(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            }
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 13: {

                            x_ = input.readFloat();
                            break;
                        }
                        case 21: {

                            y_ = input.readFloat();
                            break;
                        }
                        case 29: {

                            pressure_ = input.readFloat();
                            break;
                        }
                        default: {
                            if (!parseUnknownFieldProto3(
                                    input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return StrokesProto.internal_static_stroke_SPointF__descriptor;
        }

        @Override
        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return StrokesProto.internal_static_stroke_SPointF__fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            SPointF_.class, Builder.class);
        }

        public static final int X_FIELD_NUMBER = 1;
        private float x_;

        /**
         * <code>float X = 1;</code>
         */
        public float getX() {
            return x_;
        }

        public static final int Y_FIELD_NUMBER = 2;
        private float y_;

        /**
         * <code>float Y = 2;</code>
         */
        public float getY() {
            return y_;
        }

        public static final int PRESSURE_FIELD_NUMBER = 3;
        private float pressure_;

        /**
         * <code>float Pressure = 3;</code>
         */
        public float getPressure() {
            return pressure_;
        }

        private byte memoizedIsInitialized = -1;

        @Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        @Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (x_ != 0F) {
                output.writeFloat(1, x_);
            }
            if (y_ != 0F) {
                output.writeFloat(2, y_);
            }
            if (pressure_ != 0F) {
                output.writeFloat(3, pressure_);
            }
            unknownFields.writeTo(output);
        }

        @Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (x_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(1, x_);
            }
            if (y_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(2, y_);
            }
            if (pressure_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(3, pressure_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof SPointF_)) {
                return super.equals(obj);
            }
            SPointF_ other = (SPointF_) obj;

            boolean result = true;
            result = result && (
                    Float.floatToIntBits(getX())
                            == Float.floatToIntBits(
                            other.getX()));
            result = result && (
                    Float.floatToIntBits(getY())
                            == Float.floatToIntBits(
                            other.getY()));
            result = result && (
                    Float.floatToIntBits(getPressure())
                            == Float.floatToIntBits(
                            other.getPressure()));
            result = result && unknownFields.equals(other.unknownFields);
            return result;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + X_FIELD_NUMBER;
            hash = (53 * hash) + Float.floatToIntBits(
                    getX());
            hash = (37 * hash) + Y_FIELD_NUMBER;
            hash = (53 * hash) + Float.floatToIntBits(
                    getY());
            hash = (37 * hash) + PRESSURE_FIELD_NUMBER;
            hash = (53 * hash) + Float.floatToIntBits(
                    getPressure());
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static SPointF_ parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static SPointF_ parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static SPointF_ parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static SPointF_ parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static SPointF_ parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static SPointF_ parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static SPointF_ parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static SPointF_ parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static SPointF_ parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static SPointF_ parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static SPointF_ parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static SPointF_ parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(SPointF_ prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code stroke.SPointF_}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:stroke.SPointF_)
                SPointF_OrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return StrokesProto.internal_static_stroke_SPointF__descriptor;
            }

            @Override
            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return StrokesProto.internal_static_stroke_SPointF__fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                SPointF_.class, Builder.class);
            }

            // Construct using com.stroke.serialize.StrokesProto.SPointF_.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                x_ = 0F;

                y_ = 0F;

                pressure_ = 0F;

                return this;
            }

            @Override
            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return StrokesProto.internal_static_stroke_SPointF__descriptor;
            }

            @Override
            public SPointF_ getDefaultInstanceForType() {
                return SPointF_.getDefaultInstance();
            }

            @Override
            public SPointF_ build() {
                SPointF_ result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @Override
            public SPointF_ buildPartial() {
                SPointF_ result = new SPointF_(this);
                result.x_ = x_;
                result.y_ = y_;
                result.pressure_ = pressure_;
                onBuilt();
                return result;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            @Override
            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            @Override
            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            @Override
            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            @Override
            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            @Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof SPointF_) {
                    return mergeFrom((SPointF_) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(SPointF_ other) {
                if (other == SPointF_.getDefaultInstance()) return this;
                if (other.getX() != 0F) {
                    setX(other.getX());
                }
                if (other.getY() != 0F) {
                    setY(other.getY());
                }
                if (other.getPressure() != 0F) {
                    setPressure(other.getPressure());
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            @Override
            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                SPointF_ parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (SPointF_) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private float x_;

            /**
             * <code>float X = 1;</code>
             */
            public float getX() {
                return x_;
            }

            /**
             * <code>float X = 1;</code>
             */
            public Builder setX(float value) {

                x_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>float X = 1;</code>
             */
            public Builder clearX() {

                x_ = 0F;
                onChanged();
                return this;
            }

            private float y_;

            /**
             * <code>float Y = 2;</code>
             */
            public float getY() {
                return y_;
            }

            /**
             * <code>float Y = 2;</code>
             */
            public Builder setY(float value) {

                y_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>float Y = 2;</code>
             */
            public Builder clearY() {

                y_ = 0F;
                onChanged();
                return this;
            }

            private float pressure_;

            /**
             * <code>float Pressure = 3;</code>
             */
            public float getPressure() {
                return pressure_;
            }

            /**
             * <code>float Pressure = 3;</code>
             */
            public Builder setPressure(float value) {

                pressure_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>float Pressure = 3;</code>
             */
            public Builder clearPressure() {

                pressure_ = 0F;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFieldsProto3(unknownFields);
            }

            @Override
            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:stroke.SPointF_)
        }

        // @@protoc_insertion_point(class_scope:stroke.SPointF_)
        private static final SPointF_ DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new SPointF_();
        }

        public static SPointF_ getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<SPointF_>
                PARSER = new com.google.protobuf.AbstractParser<SPointF_>() {
            @Override
            public SPointF_ parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new SPointF_(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<SPointF_> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<SPointF_> getParserForType() {
            return PARSER;
        }

        @Override
        public SPointF_ getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface Stroke_OrBuilder extends
            // @@protoc_insertion_point(interface_extends:stroke.Stroke_)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>int32 Id = 1;</code>
         */
        int getId();

        /**
         * <code>int32 Style = 2;</code>
         */
        int getStyle();

        /**
         * <code>int32 Width = 8;</code>
         */
        int getWidth();

        /**
         * <code>int32 Color = 3;</code>
         */
        int getColor();

        /**
         * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
         */
        java.util.List<SPointF_>
        getSPointFlistList();

        /**
         * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
         */
        SPointF_ getSPointFlist(int index);

        /**
         * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
         */
        int getSPointFlistCount();

        /**
         * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
         */
        java.util.List<? extends SPointF_OrBuilder>
        getSPointFlistOrBuilderList();

        /**
         * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
         */
        SPointF_OrBuilder getSPointFlistOrBuilder(
                int index);

        /**
         * <code>float Scale = 5;</code>
         */
        float getScale();

        /**
         * <code>float OffsetX = 6;</code>
         */
        float getOffsetX();

        /**
         * <code>float OffsetY = 7;</code>
         */
        float getOffsetY();

        /**
         * <code>.stroke.RenderStyle renderStyle = 9;</code>
         */
        int getRenderStyleValue();

        /**
         * <code>.stroke.RenderStyle renderStyle = 9;</code>
         */
        RenderStyle getRenderStyle();
    }

    /**
     * Protobuf type {@code stroke.Stroke_}
     */
    public static final class Stroke_ extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:stroke.Stroke_)
            Stroke_OrBuilder {
        private static final long serialVersionUID = 0L;

        // Use Stroke_.newBuilder() to construct.
        private Stroke_(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private Stroke_() {
            id_ = 0;
            style_ = 0;
            width_ = 0;
            color_ = 0;
            sPointFlist_ = java.util.Collections.emptyList();
            scale_ = 0F;
            offsetX_ = 0F;
            offsetY_ = 0F;
            renderStyle_ = 0;
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private Stroke_(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            }
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8: {

                            id_ = input.readInt32();
                            break;
                        }
                        case 16: {

                            style_ = input.readInt32();
                            break;
                        }
                        case 24: {

                            color_ = input.readInt32();
                            break;
                        }
                        case 34: {
                            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                                sPointFlist_ = new java.util.ArrayList<SPointF_>();
                                mutable_bitField0_ |= 0x00000010;
                            }
                            sPointFlist_.add(
                                    input.readMessage(SPointF_.parser(), extensionRegistry));
                            break;
                        }
                        case 45: {

                            scale_ = input.readFloat();
                            break;
                        }
                        case 53: {

                            offsetX_ = input.readFloat();
                            break;
                        }
                        case 61: {

                            offsetY_ = input.readFloat();
                            break;
                        }
                        case 64: {

                            width_ = input.readInt32();
                            break;
                        }
                        case 72: {
                            int rawValue = input.readEnum();

                            renderStyle_ = rawValue;
                            break;
                        }
                        default: {
                            if (!parseUnknownFieldProto3(
                                    input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                    sPointFlist_ = java.util.Collections.unmodifiableList(sPointFlist_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return StrokesProto.internal_static_stroke_Stroke__descriptor;
        }

        @Override
        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return StrokesProto.internal_static_stroke_Stroke__fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            Stroke_.class, Builder.class);
        }

        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private int id_;

        /**
         * <code>int32 Id = 1;</code>
         */
        public int getId() {
            return id_;
        }

        public static final int STYLE_FIELD_NUMBER = 2;
        private int style_;

        /**
         * <code>int32 Style = 2;</code>
         */
        public int getStyle() {
            return style_;
        }

        public static final int WIDTH_FIELD_NUMBER = 8;
        private int width_;

        /**
         * <code>int32 Width = 8;</code>
         */
        public int getWidth() {
            return width_;
        }

        public static final int COLOR_FIELD_NUMBER = 3;
        private int color_;

        /**
         * <code>int32 Color = 3;</code>
         */
        public int getColor() {
            return color_;
        }

        public static final int SPOINTFLIST_FIELD_NUMBER = 4;
        private java.util.List<SPointF_> sPointFlist_;

        /**
         * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
         */
        public java.util.List<SPointF_> getSPointFlistList() {
            return sPointFlist_;
        }

        /**
         * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
         */
        public java.util.List<? extends SPointF_OrBuilder>
        getSPointFlistOrBuilderList() {
            return sPointFlist_;
        }

        /**
         * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
         */
        public int getSPointFlistCount() {
            return sPointFlist_.size();
        }

        /**
         * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
         */
        public SPointF_ getSPointFlist(int index) {
            return sPointFlist_.get(index);
        }

        /**
         * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
         */
        public SPointF_OrBuilder getSPointFlistOrBuilder(
                int index) {
            return sPointFlist_.get(index);
        }

        public static final int SCALE_FIELD_NUMBER = 5;
        private float scale_;

        /**
         * <code>float Scale = 5;</code>
         */
        public float getScale() {
            return scale_;
        }

        public static final int OFFSETX_FIELD_NUMBER = 6;
        private float offsetX_;

        /**
         * <code>float OffsetX = 6;</code>
         */
        public float getOffsetX() {
            return offsetX_;
        }

        public static final int OFFSETY_FIELD_NUMBER = 7;
        private float offsetY_;

        /**
         * <code>float OffsetY = 7;</code>
         */
        public float getOffsetY() {
            return offsetY_;
        }

        public static final int RENDERSTYLE_FIELD_NUMBER = 9;
        private int renderStyle_;

        /**
         * <code>.stroke.RenderStyle renderStyle = 9;</code>
         */
        public int getRenderStyleValue() {
            return renderStyle_;
        }

        /**
         * <code>.stroke.RenderStyle renderStyle = 9;</code>
         */
        public RenderStyle getRenderStyle() {
            @SuppressWarnings("deprecation")
            RenderStyle result = RenderStyle.valueOf(renderStyle_);
            return result == null ? RenderStyle.UNRECOGNIZED : result;
        }

        private byte memoizedIsInitialized = -1;

        @Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        @Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (id_ != 0) {
                output.writeInt32(1, id_);
            }
            if (style_ != 0) {
                output.writeInt32(2, style_);
            }
            if (color_ != 0) {
                output.writeInt32(3, color_);
            }
            for (int i = 0; i < sPointFlist_.size(); i++) {
                output.writeMessage(4, sPointFlist_.get(i));
            }
            if (scale_ != 0F) {
                output.writeFloat(5, scale_);
            }
            if (offsetX_ != 0F) {
                output.writeFloat(6, offsetX_);
            }
            if (offsetY_ != 0F) {
                output.writeFloat(7, offsetY_);
            }
            if (width_ != 0) {
                output.writeInt32(8, width_);
            }
            if (renderStyle_ != RenderStyle.Sharp.getNumber()) {
                output.writeEnum(9, renderStyle_);
            }
            unknownFields.writeTo(output);
        }

        @Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (id_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(1, id_);
            }
            if (style_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(2, style_);
            }
            if (color_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(3, color_);
            }
            for (int i = 0; i < sPointFlist_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, sPointFlist_.get(i));
            }
            if (scale_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(5, scale_);
            }
            if (offsetX_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(6, offsetX_);
            }
            if (offsetY_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(7, offsetY_);
            }
            if (width_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(8, width_);
            }
            if (renderStyle_ != RenderStyle.Sharp.getNumber()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(9, renderStyle_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Stroke_)) {
                return super.equals(obj);
            }
            Stroke_ other = (Stroke_) obj;

            boolean result = true;
            result = result && (getId()
                    == other.getId());
            result = result && (getStyle()
                    == other.getStyle());
            result = result && (getWidth()
                    == other.getWidth());
            result = result && (getColor()
                    == other.getColor());
            result = result && getSPointFlistList()
                    .equals(other.getSPointFlistList());
            result = result && (
                    Float.floatToIntBits(getScale())
                            == Float.floatToIntBits(
                            other.getScale()));
            result = result && (
                    Float.floatToIntBits(getOffsetX())
                            == Float.floatToIntBits(
                            other.getOffsetX()));
            result = result && (
                    Float.floatToIntBits(getOffsetY())
                            == Float.floatToIntBits(
                            other.getOffsetY()));
            result = result && renderStyle_ == other.renderStyle_;
            result = result && unknownFields.equals(other.unknownFields);
            return result;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + ID_FIELD_NUMBER;
            hash = (53 * hash) + getId();
            hash = (37 * hash) + STYLE_FIELD_NUMBER;
            hash = (53 * hash) + getStyle();
            hash = (37 * hash) + WIDTH_FIELD_NUMBER;
            hash = (53 * hash) + getWidth();
            hash = (37 * hash) + COLOR_FIELD_NUMBER;
            hash = (53 * hash) + getColor();
            if (getSPointFlistCount() > 0) {
                hash = (37 * hash) + SPOINTFLIST_FIELD_NUMBER;
                hash = (53 * hash) + getSPointFlistList().hashCode();
            }
            hash = (37 * hash) + SCALE_FIELD_NUMBER;
            hash = (53 * hash) + Float.floatToIntBits(
                    getScale());
            hash = (37 * hash) + OFFSETX_FIELD_NUMBER;
            hash = (53 * hash) + Float.floatToIntBits(
                    getOffsetX());
            hash = (37 * hash) + OFFSETY_FIELD_NUMBER;
            hash = (53 * hash) + Float.floatToIntBits(
                    getOffsetY());
            hash = (37 * hash) + RENDERSTYLE_FIELD_NUMBER;
            hash = (53 * hash) + renderStyle_;
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static Stroke_ parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Stroke_ parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Stroke_ parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Stroke_ parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Stroke_ parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Stroke_ parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Stroke_ parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Stroke_ parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Stroke_ parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static Stroke_ parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static Stroke_ parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Stroke_ parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Stroke_ prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code stroke.Stroke_}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:stroke.Stroke_)
                Stroke_OrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return StrokesProto.internal_static_stroke_Stroke__descriptor;
            }

            @Override
            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return StrokesProto.internal_static_stroke_Stroke__fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                Stroke_.class, Builder.class);
            }

            // Construct using com.stroke.serialize.StrokesProto.Stroke_.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getSPointFlistFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                id_ = 0;

                style_ = 0;

                width_ = 0;

                color_ = 0;

                if (sPointFlistBuilder_ == null) {
                    sPointFlist_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000010);
                } else {
                    sPointFlistBuilder_.clear();
                }
                scale_ = 0F;

                offsetX_ = 0F;

                offsetY_ = 0F;

                renderStyle_ = 0;

                return this;
            }

            @Override
            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return StrokesProto.internal_static_stroke_Stroke__descriptor;
            }

            @Override
            public Stroke_ getDefaultInstanceForType() {
                return Stroke_.getDefaultInstance();
            }

            @Override
            public Stroke_ build() {
                Stroke_ result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @Override
            public Stroke_ buildPartial() {
                Stroke_ result = new Stroke_(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                result.id_ = id_;
                result.style_ = style_;
                result.width_ = width_;
                result.color_ = color_;
                if (sPointFlistBuilder_ == null) {
                    if (((bitField0_ & 0x00000010) == 0x00000010)) {
                        sPointFlist_ = java.util.Collections.unmodifiableList(sPointFlist_);
                        bitField0_ = (bitField0_ & ~0x00000010);
                    }
                    result.sPointFlist_ = sPointFlist_;
                } else {
                    result.sPointFlist_ = sPointFlistBuilder_.build();
                }
                result.scale_ = scale_;
                result.offsetX_ = offsetX_;
                result.offsetY_ = offsetY_;
                result.renderStyle_ = renderStyle_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            @Override
            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            @Override
            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            @Override
            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            @Override
            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            @Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof Stroke_) {
                    return mergeFrom((Stroke_) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(Stroke_ other) {
                if (other == Stroke_.getDefaultInstance()) return this;
                if (other.getId() != 0) {
                    setId(other.getId());
                }
                if (other.getStyle() != 0) {
                    setStyle(other.getStyle());
                }
                if (other.getWidth() != 0) {
                    setWidth(other.getWidth());
                }
                if (other.getColor() != 0) {
                    setColor(other.getColor());
                }
                if (sPointFlistBuilder_ == null) {
                    if (!other.sPointFlist_.isEmpty()) {
                        if (sPointFlist_.isEmpty()) {
                            sPointFlist_ = other.sPointFlist_;
                            bitField0_ = (bitField0_ & ~0x00000010);
                        } else {
                            ensureSPointFlistIsMutable();
                            sPointFlist_.addAll(other.sPointFlist_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.sPointFlist_.isEmpty()) {
                        if (sPointFlistBuilder_.isEmpty()) {
                            sPointFlistBuilder_.dispose();
                            sPointFlistBuilder_ = null;
                            sPointFlist_ = other.sPointFlist_;
                            bitField0_ = (bitField0_ & ~0x00000010);
                            sPointFlistBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getSPointFlistFieldBuilder() : null;
                        } else {
                            sPointFlistBuilder_.addAllMessages(other.sPointFlist_);
                        }
                    }
                }
                if (other.getScale() != 0F) {
                    setScale(other.getScale());
                }
                if (other.getOffsetX() != 0F) {
                    setOffsetX(other.getOffsetX());
                }
                if (other.getOffsetY() != 0F) {
                    setOffsetY(other.getOffsetY());
                }
                if (other.renderStyle_ != 0) {
                    setRenderStyleValue(other.getRenderStyleValue());
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            @Override
            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                Stroke_ parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (Stroke_) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private int id_;

            /**
             * <code>int32 Id = 1;</code>
             */
            public int getId() {
                return id_;
            }

            /**
             * <code>int32 Id = 1;</code>
             */
            public Builder setId(int value) {

                id_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>int32 Id = 1;</code>
             */
            public Builder clearId() {

                id_ = 0;
                onChanged();
                return this;
            }

            private int style_;

            /**
             * <code>int32 Style = 2;</code>
             */
            public int getStyle() {
                return style_;
            }

            /**
             * <code>int32 Style = 2;</code>
             */
            public Builder setStyle(int value) {

                style_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>int32 Style = 2;</code>
             */
            public Builder clearStyle() {

                style_ = 0;
                onChanged();
                return this;
            }

            private int width_;

            /**
             * <code>int32 Width = 8;</code>
             */
            public int getWidth() {
                return width_;
            }

            /**
             * <code>int32 Width = 8;</code>
             */
            public Builder setWidth(int value) {

                width_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>int32 Width = 8;</code>
             */
            public Builder clearWidth() {

                width_ = 0;
                onChanged();
                return this;
            }

            private int color_;

            /**
             * <code>int32 Color = 3;</code>
             */
            public int getColor() {
                return color_;
            }

            /**
             * <code>int32 Color = 3;</code>
             */
            public Builder setColor(int value) {

                color_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>int32 Color = 3;</code>
             */
            public Builder clearColor() {

                color_ = 0;
                onChanged();
                return this;
            }

            private java.util.List<SPointF_> sPointFlist_ =
                    java.util.Collections.emptyList();

            private void ensureSPointFlistIsMutable() {
                if (!((bitField0_ & 0x00000010) == 0x00000010)) {
                    sPointFlist_ = new java.util.ArrayList<SPointF_>(sPointFlist_);
                    bitField0_ |= 0x00000010;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    SPointF_, SPointF_.Builder, SPointF_OrBuilder> sPointFlistBuilder_;

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public java.util.List<SPointF_> getSPointFlistList() {
                if (sPointFlistBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(sPointFlist_);
                } else {
                    return sPointFlistBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public int getSPointFlistCount() {
                if (sPointFlistBuilder_ == null) {
                    return sPointFlist_.size();
                } else {
                    return sPointFlistBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public SPointF_ getSPointFlist(int index) {
                if (sPointFlistBuilder_ == null) {
                    return sPointFlist_.get(index);
                } else {
                    return sPointFlistBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public Builder setSPointFlist(
                    int index, SPointF_ value) {
                if (sPointFlistBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSPointFlistIsMutable();
                    sPointFlist_.set(index, value);
                    onChanged();
                } else {
                    sPointFlistBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public Builder setSPointFlist(
                    int index, SPointF_.Builder builderForValue) {
                if (sPointFlistBuilder_ == null) {
                    ensureSPointFlistIsMutable();
                    sPointFlist_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    sPointFlistBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public Builder addSPointFlist(SPointF_ value) {
                if (sPointFlistBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSPointFlistIsMutable();
                    sPointFlist_.add(value);
                    onChanged();
                } else {
                    sPointFlistBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public Builder addSPointFlist(
                    int index, SPointF_ value) {
                if (sPointFlistBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSPointFlistIsMutable();
                    sPointFlist_.add(index, value);
                    onChanged();
                } else {
                    sPointFlistBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public Builder addSPointFlist(
                    SPointF_.Builder builderForValue) {
                if (sPointFlistBuilder_ == null) {
                    ensureSPointFlistIsMutable();
                    sPointFlist_.add(builderForValue.build());
                    onChanged();
                } else {
                    sPointFlistBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public Builder addSPointFlist(
                    int index, SPointF_.Builder builderForValue) {
                if (sPointFlistBuilder_ == null) {
                    ensureSPointFlistIsMutable();
                    sPointFlist_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    sPointFlistBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public Builder addAllSPointFlist(
                    Iterable<? extends SPointF_> values) {
                if (sPointFlistBuilder_ == null) {
                    ensureSPointFlistIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, sPointFlist_);
                    onChanged();
                } else {
                    sPointFlistBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public Builder clearSPointFlist() {
                if (sPointFlistBuilder_ == null) {
                    sPointFlist_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000010);
                    onChanged();
                } else {
                    sPointFlistBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public Builder removeSPointFlist(int index) {
                if (sPointFlistBuilder_ == null) {
                    ensureSPointFlistIsMutable();
                    sPointFlist_.remove(index);
                    onChanged();
                } else {
                    sPointFlistBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public SPointF_.Builder getSPointFlistBuilder(
                    int index) {
                return getSPointFlistFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public SPointF_OrBuilder getSPointFlistOrBuilder(
                    int index) {
                if (sPointFlistBuilder_ == null) {
                    return sPointFlist_.get(index);
                } else {
                    return sPointFlistBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public java.util.List<? extends SPointF_OrBuilder>
            getSPointFlistOrBuilderList() {
                if (sPointFlistBuilder_ != null) {
                    return sPointFlistBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(sPointFlist_);
                }
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public SPointF_.Builder addSPointFlistBuilder() {
                return getSPointFlistFieldBuilder().addBuilder(
                        SPointF_.getDefaultInstance());
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public SPointF_.Builder addSPointFlistBuilder(
                    int index) {
                return getSPointFlistFieldBuilder().addBuilder(
                        index, SPointF_.getDefaultInstance());
            }

            /**
             * <code>repeated .stroke.SPointF_ SPointFlist = 4;</code>
             */
            public java.util.List<SPointF_.Builder>
            getSPointFlistBuilderList() {
                return getSPointFlistFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    SPointF_, SPointF_.Builder, SPointF_OrBuilder>
            getSPointFlistFieldBuilder() {
                if (sPointFlistBuilder_ == null) {
                    sPointFlistBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            SPointF_, SPointF_.Builder, SPointF_OrBuilder>(
                            sPointFlist_,
                            ((bitField0_ & 0x00000010) == 0x00000010),
                            getParentForChildren(),
                            isClean());
                    sPointFlist_ = null;
                }
                return sPointFlistBuilder_;
            }

            private float scale_;

            /**
             * <code>float Scale = 5;</code>
             */
            public float getScale() {
                return scale_;
            }

            /**
             * <code>float Scale = 5;</code>
             */
            public Builder setScale(float value) {

                scale_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>float Scale = 5;</code>
             */
            public Builder clearScale() {

                scale_ = 0F;
                onChanged();
                return this;
            }

            private float offsetX_;

            /**
             * <code>float OffsetX = 6;</code>
             */
            public float getOffsetX() {
                return offsetX_;
            }

            /**
             * <code>float OffsetX = 6;</code>
             */
            public Builder setOffsetX(float value) {

                offsetX_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>float OffsetX = 6;</code>
             */
            public Builder clearOffsetX() {

                offsetX_ = 0F;
                onChanged();
                return this;
            }

            private float offsetY_;

            /**
             * <code>float OffsetY = 7;</code>
             */
            public float getOffsetY() {
                return offsetY_;
            }

            /**
             * <code>float OffsetY = 7;</code>
             */
            public Builder setOffsetY(float value) {

                offsetY_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>float OffsetY = 7;</code>
             */
            public Builder clearOffsetY() {

                offsetY_ = 0F;
                onChanged();
                return this;
            }

            private int renderStyle_ = 0;

            /**
             * <code>.stroke.RenderStyle renderStyle = 9;</code>
             */
            public int getRenderStyleValue() {
                return renderStyle_;
            }

            /**
             * <code>.stroke.RenderStyle renderStyle = 9;</code>
             */
            public Builder setRenderStyleValue(int value) {
                renderStyle_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>.stroke.RenderStyle renderStyle = 9;</code>
             */
            public RenderStyle getRenderStyle() {
                @SuppressWarnings("deprecation")
                RenderStyle result = RenderStyle.valueOf(renderStyle_);
                return result == null ? RenderStyle.UNRECOGNIZED : result;
            }

            /**
             * <code>.stroke.RenderStyle renderStyle = 9;</code>
             */
            public Builder setRenderStyle(RenderStyle value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                renderStyle_ = value.getNumber();
                onChanged();
                return this;
            }

            /**
             * <code>.stroke.RenderStyle renderStyle = 9;</code>
             */
            public Builder clearRenderStyle() {

                renderStyle_ = 0;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFieldsProto3(unknownFields);
            }

            @Override
            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:stroke.Stroke_)
        }

        // @@protoc_insertion_point(class_scope:stroke.Stroke_)
        private static final Stroke_ DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new Stroke_();
        }

        public static Stroke_ getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Stroke_>
                PARSER = new com.google.protobuf.AbstractParser<Stroke_>() {
            @Override
            public Stroke_ parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Stroke_(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<Stroke_> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<Stroke_> getParserForType() {
            return PARSER;
        }

        @Override
        public Stroke_ getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface Strokes_OrBuilder extends
            // @@protoc_insertion_point(interface_extends:stroke.Strokes_)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
         */
        java.util.List<Stroke_>
        getStrokeListList();

        /**
         * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
         */
        Stroke_ getStrokeList(int index);

        /**
         * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
         */
        int getStrokeListCount();

        /**
         * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
         */
        java.util.List<? extends Stroke_OrBuilder>
        getStrokeListOrBuilderList();

        /**
         * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
         */
        Stroke_OrBuilder getStrokeListOrBuilder(
                int index);
    }

    /**
     * Protobuf type {@code stroke.Strokes_}
     */
    public static final class Strokes_ extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:stroke.Strokes_)
            Strokes_OrBuilder {
        private static final long serialVersionUID = 0L;

        // Use Strokes_.newBuilder() to construct.
        private Strokes_(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private Strokes_() {
            strokeList_ = java.util.Collections.emptyList();
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private Strokes_(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            }
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                strokeList_ = new java.util.ArrayList<Stroke_>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            strokeList_.add(
                                    input.readMessage(Stroke_.parser(), extensionRegistry));
                            break;
                        }
                        default: {
                            if (!parseUnknownFieldProto3(
                                    input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    strokeList_ = java.util.Collections.unmodifiableList(strokeList_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return StrokesProto.internal_static_stroke_Strokes__descriptor;
        }

        @Override
        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return StrokesProto.internal_static_stroke_Strokes__fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            Strokes_.class, Builder.class);
        }

        public static final int STROKELIST_FIELD_NUMBER = 1;
        private java.util.List<Stroke_> strokeList_;

        /**
         * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
         */
        public java.util.List<Stroke_> getStrokeListList() {
            return strokeList_;
        }

        /**
         * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
         */
        public java.util.List<? extends Stroke_OrBuilder>
        getStrokeListOrBuilderList() {
            return strokeList_;
        }

        /**
         * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
         */
        public int getStrokeListCount() {
            return strokeList_.size();
        }

        /**
         * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
         */
        public Stroke_ getStrokeList(int index) {
            return strokeList_.get(index);
        }

        /**
         * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
         */
        public Stroke_OrBuilder getStrokeListOrBuilder(
                int index) {
            return strokeList_.get(index);
        }

        private byte memoizedIsInitialized = -1;

        @Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        @Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < strokeList_.size(); i++) {
                output.writeMessage(1, strokeList_.get(i));
            }
            unknownFields.writeTo(output);
        }

        @Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < strokeList_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, strokeList_.get(i));
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Strokes_)) {
                return super.equals(obj);
            }
            Strokes_ other = (Strokes_) obj;

            boolean result = true;
            result = result && getStrokeListList()
                    .equals(other.getStrokeListList());
            result = result && unknownFields.equals(other.unknownFields);
            return result;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getStrokeListCount() > 0) {
                hash = (37 * hash) + STROKELIST_FIELD_NUMBER;
                hash = (53 * hash) + getStrokeListList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static Strokes_ parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Strokes_ parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Strokes_ parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Strokes_ parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Strokes_ parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Strokes_ parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Strokes_ parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Strokes_ parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Strokes_ parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static Strokes_ parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static Strokes_ parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Strokes_ parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Strokes_ prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code stroke.Strokes_}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:stroke.Strokes_)
                Strokes_OrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return StrokesProto.internal_static_stroke_Strokes__descriptor;
            }

            @Override
            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return StrokesProto.internal_static_stroke_Strokes__fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                Strokes_.class, Builder.class);
            }

            // Construct using com.stroke.serialize.StrokesProto.Strokes_.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getStrokeListFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                if (strokeListBuilder_ == null) {
                    strokeList_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    strokeListBuilder_.clear();
                }
                return this;
            }

            @Override
            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return StrokesProto.internal_static_stroke_Strokes__descriptor;
            }

            @Override
            public Strokes_ getDefaultInstanceForType() {
                return Strokes_.getDefaultInstance();
            }

            @Override
            public Strokes_ build() {
                Strokes_ result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @Override
            public Strokes_ buildPartial() {
                Strokes_ result = new Strokes_(this);
                int from_bitField0_ = bitField0_;
                if (strokeListBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        strokeList_ = java.util.Collections.unmodifiableList(strokeList_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.strokeList_ = strokeList_;
                } else {
                    result.strokeList_ = strokeListBuilder_.build();
                }
                onBuilt();
                return result;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            @Override
            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            @Override
            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            @Override
            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            @Override
            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            @Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof Strokes_) {
                    return mergeFrom((Strokes_) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(Strokes_ other) {
                if (other == Strokes_.getDefaultInstance()) return this;
                if (strokeListBuilder_ == null) {
                    if (!other.strokeList_.isEmpty()) {
                        if (strokeList_.isEmpty()) {
                            strokeList_ = other.strokeList_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureStrokeListIsMutable();
                            strokeList_.addAll(other.strokeList_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.strokeList_.isEmpty()) {
                        if (strokeListBuilder_.isEmpty()) {
                            strokeListBuilder_.dispose();
                            strokeListBuilder_ = null;
                            strokeList_ = other.strokeList_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            strokeListBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getStrokeListFieldBuilder() : null;
                        } else {
                            strokeListBuilder_.addAllMessages(other.strokeList_);
                        }
                    }
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            @Override
            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                Strokes_ parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (Strokes_) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private java.util.List<Stroke_> strokeList_ =
                    java.util.Collections.emptyList();

            private void ensureStrokeListIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    strokeList_ = new java.util.ArrayList<Stroke_>(strokeList_);
                    bitField0_ |= 0x00000001;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Stroke_, Stroke_.Builder, Stroke_OrBuilder> strokeListBuilder_;

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public java.util.List<Stroke_> getStrokeListList() {
                if (strokeListBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(strokeList_);
                } else {
                    return strokeListBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public int getStrokeListCount() {
                if (strokeListBuilder_ == null) {
                    return strokeList_.size();
                } else {
                    return strokeListBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public Stroke_ getStrokeList(int index) {
                if (strokeListBuilder_ == null) {
                    return strokeList_.get(index);
                } else {
                    return strokeListBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public Builder setStrokeList(
                    int index, Stroke_ value) {
                if (strokeListBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureStrokeListIsMutable();
                    strokeList_.set(index, value);
                    onChanged();
                } else {
                    strokeListBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public Builder setStrokeList(
                    int index, Stroke_.Builder builderForValue) {
                if (strokeListBuilder_ == null) {
                    ensureStrokeListIsMutable();
                    strokeList_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    strokeListBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public Builder addStrokeList(Stroke_ value) {
                if (strokeListBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureStrokeListIsMutable();
                    strokeList_.add(value);
                    onChanged();
                } else {
                    strokeListBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public Builder addStrokeList(
                    int index, Stroke_ value) {
                if (strokeListBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureStrokeListIsMutable();
                    strokeList_.add(index, value);
                    onChanged();
                } else {
                    strokeListBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public Builder addStrokeList(
                    Stroke_.Builder builderForValue) {
                if (strokeListBuilder_ == null) {
                    ensureStrokeListIsMutable();
                    strokeList_.add(builderForValue.build());
                    onChanged();
                } else {
                    strokeListBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public Builder addStrokeList(
                    int index, Stroke_.Builder builderForValue) {
                if (strokeListBuilder_ == null) {
                    ensureStrokeListIsMutable();
                    strokeList_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    strokeListBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public Builder addAllStrokeList(
                    Iterable<? extends Stroke_> values) {
                if (strokeListBuilder_ == null) {
                    ensureStrokeListIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, strokeList_);
                    onChanged();
                } else {
                    strokeListBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public Builder clearStrokeList() {
                if (strokeListBuilder_ == null) {
                    strokeList_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    strokeListBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public Builder removeStrokeList(int index) {
                if (strokeListBuilder_ == null) {
                    ensureStrokeListIsMutable();
                    strokeList_.remove(index);
                    onChanged();
                } else {
                    strokeListBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public Stroke_.Builder getStrokeListBuilder(
                    int index) {
                return getStrokeListFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public Stroke_OrBuilder getStrokeListOrBuilder(
                    int index) {
                if (strokeListBuilder_ == null) {
                    return strokeList_.get(index);
                } else {
                    return strokeListBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public java.util.List<? extends Stroke_OrBuilder>
            getStrokeListOrBuilderList() {
                if (strokeListBuilder_ != null) {
                    return strokeListBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(strokeList_);
                }
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public Stroke_.Builder addStrokeListBuilder() {
                return getStrokeListFieldBuilder().addBuilder(
                        Stroke_.getDefaultInstance());
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public Stroke_.Builder addStrokeListBuilder(
                    int index) {
                return getStrokeListFieldBuilder().addBuilder(
                        index, Stroke_.getDefaultInstance());
            }

            /**
             * <code>repeated .stroke.Stroke_ StrokeList = 1;</code>
             */
            public java.util.List<Stroke_.Builder>
            getStrokeListBuilderList() {
                return getStrokeListFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Stroke_, Stroke_.Builder, Stroke_OrBuilder>
            getStrokeListFieldBuilder() {
                if (strokeListBuilder_ == null) {
                    strokeListBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            Stroke_, Stroke_.Builder, Stroke_OrBuilder>(
                            strokeList_,
                            ((bitField0_ & 0x00000001) == 0x00000001),
                            getParentForChildren(),
                            isClean());
                    strokeList_ = null;
                }
                return strokeListBuilder_;
            }

            @Override
            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFieldsProto3(unknownFields);
            }

            @Override
            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:stroke.Strokes_)
        }

        // @@protoc_insertion_point(class_scope:stroke.Strokes_)
        private static final Strokes_ DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new Strokes_();
        }

        public static Strokes_ getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Strokes_>
                PARSER = new com.google.protobuf.AbstractParser<Strokes_>() {
            @Override
            public Strokes_ parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Strokes_(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<Strokes_> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<Strokes_> getParserForType() {
            return PARSER;
        }

        @Override
        public Strokes_ getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_stroke_SPointF__descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_stroke_SPointF__fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_stroke_Stroke__descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_stroke_Stroke__fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_stroke_Strokes__descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_stroke_Strokes__fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        String[] descriptorData = {
                "\n\022StrokesProto.proto\022\006stroke\"2\n\010SPointF_" +
                        "\022\t\n\001X\030\001 \001(\002\022\t\n\001Y\030\002 \001(\002\022\020\n\010Pressure\030\003 \001(\002" +
                        "\"\304\001\n\007Stroke_\022\n\n\002Id\030\001 \001(\005\022\r\n\005Style\030\002 \001(\005\022" +
                        "\r\n\005Width\030\010 \001(\005\022\r\n\005Color\030\003 \001(\005\022%\n\013SPointF" +
                        "list\030\004 \003(\0132\020.stroke.SPointF_\022\r\n\005Scale\030\005 " +
                        "\001(\002\022\017\n\007OffsetX\030\006 \001(\002\022\017\n\007OffsetY\030\007 \001(\002\022(\n" +
                        "\013renderStyle\030\t \001(\0162\023.stroke.RenderStyle\"" +
                        "/\n\010Strokes_\022#\n\nStrokeList\030\001 \003(\0132\017.stroke" +
                        ".Stroke_*#\n\013RenderStyle\022\t\n\005Sharp\020\000\022\t\n\005Ro" +
                        "und\020\001B$\n\024com.stroke.serializeB\014StrokesPr" +
                        "otob\006proto3"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                        }, assigner);
        internal_static_stroke_SPointF__descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_stroke_SPointF__fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_stroke_SPointF__descriptor,
                new String[]{"X", "Y", "Pressure",});
        internal_static_stroke_Stroke__descriptor =
                getDescriptor().getMessageTypes().get(1);
        internal_static_stroke_Stroke__fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_stroke_Stroke__descriptor,
                new String[]{"Id", "Style", "Width", "Color", "SPointFlist", "Scale", "OffsetX", "OffsetY", "RenderStyle",});
        internal_static_stroke_Strokes__descriptor =
                getDescriptor().getMessageTypes().get(2);
        internal_static_stroke_Strokes__fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_stroke_Strokes__descriptor,
                new String[]{"StrokeList",});
    }

    // @@protoc_insertion_point(outer_class_scope)
}
